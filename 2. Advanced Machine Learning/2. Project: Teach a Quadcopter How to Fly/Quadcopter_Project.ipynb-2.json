{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Train a Quadcopter How to Fly\n",
    "\n",
    "Design an agent to fly a quadcopter, and then train it using a reinforcement learning algorithm of your choice! \n",
    "\n",
    "Try to apply the techniques you have learnt, but also feel free to come up with innovative ideas and test them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instructions\n",
    "\n",
    "Take a look at the files in the directory to better understand the structure of the project. \n",
    "\n",
    "- `task.py`: Define your task (environment) in this file.\n",
    "- `agents/`: Folder containing reinforcement learning agents.\n",
    "    - `policy_search.py`: A sample agent has been provided here.\n",
    "    - `agent.py`: Develop your agent here.\n",
    "- `physics_sim.py`: This file contains the simulator for the quadcopter.  **DO NOT MODIFY THIS FILE**.\n",
    "\n",
    "For this project, you will define your own task in `task.py`.  Although we have provided a example task to get you started, you are encouraged to change it.  Later in this notebook, you will learn more about how to amend this file.\n",
    "\n",
    "You will also design a reinforcement learning agent in `agent.py` to complete your chosen task.  \n",
    "\n",
    "You are welcome to create any additional files to help you to organize your code.  For instance, you may find it useful to define a `model.py` file defining any needed neural network architectures.\n",
    "\n",
    "## Controlling the Quadcopter\n",
    "\n",
    "We provide a sample agent in the code cell below to show you how to use the sim to control the quadcopter.  This agent is even simpler than the sample agent that you'll examine (in `agents/policy_search.py`) later in this notebook!\n",
    "\n",
    "The agent controls the quadcopter by setting the revolutions per second on each of its four rotors.  The provided agent in the `Basic_Agent` class below always selects a random action for each of the four rotors.  These four speeds are returned by the `act` method as a list of four floating-point numbers.  \n",
    "\n",
    "For this project, the agent that you will implement in `agents/agent.py` will have a far more intelligent method for selecting actions!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "class Basic_Agent():\n",
    "    def __init__(self, task):\n",
    "        self.task = task\n",
    "    \n",
    "    def act(self):\n",
    "        new_thrust = random.gauss(450., 25.)\n",
    "        return [new_thrust + random.gauss(0., 1.) for x in range(4)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the code cell below to have the agent select actions to control the quadcopter.  \n",
    "\n",
    "Feel free to change the provided values of `runtime`, `init_pose`, `init_velocities`, and `init_angle_velocities` below to change the starting conditions of the quadcopter.\n",
    "\n",
    "The `labels` list below annotates statistics that are saved while running the simulation.  All of this information is saved in a text file `data.txt` and stored in the dictionary `results`.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "from task import Task\n",
    "\n",
    "# Modify the values below to give the quadcopter a different starting position.\n",
    "runtime = 5.                                     # time limit of the episode\n",
    "init_pose = np.array([0., 0., 10., 0., 0., 0.])  # initial pose\n",
    "init_velocities = np.array([0., 0., 0.])         # initial velocities\n",
    "init_angle_velocities = np.array([0., 0., 0.])   # initial angle velocities\n",
    "file_output = 'data.txt'                         # file name for saved results\n",
    "\n",
    "# Setup\n",
    "task = Task(init_pose, init_velocities, init_angle_velocities, runtime)\n",
    "agent = Basic_Agent(task)\n",
    "done = False\n",
    "labels = ['time', 'x', 'y', 'z', 'phi', 'theta', 'psi', 'x_velocity',\n",
    "          'y_velocity', 'z_velocity', 'phi_velocity', 'theta_velocity',\n",
    "          'psi_velocity', 'rotor_speed1', 'rotor_speed2', 'rotor_speed3', 'rotor_speed4']\n",
    "results = {x : [] for x in labels}\n",
    "\n",
    "# Run the simulation, and save the results.\n",
    "with open(file_output, 'w') as csvfile:\n",
    "    writer = csv.writer(csvfile)\n",
    "    writer.writerow(labels)\n",
    "    while True:\n",
    "        rotor_speeds = agent.act()\n",
    "        _, _, done = task.step(rotor_speeds)\n",
    "        to_write = [task.sim.time] + list(task.sim.pose) + list(task.sim.v) + list(task.sim.angular_v) + list(rotor_speeds)\n",
    "        for ii in range(len(labels)):\n",
    "            results[labels[ii]].append(to_write[ii])\n",
    "        writer.writerow(to_write)\n",
    "        if done:\n",
    "            break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the code cell below to visualize how the position of the quadcopter evolved during the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f17cc13b630>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.plot(results['time'], results['x'], label='x')\n",
    "plt.plot(results['time'], results['y'], label='y')\n",
    "plt.plot(results['time'], results['z'], label='z')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next code cell visualizes the velocity of the quadcopter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f17c3383588>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['x_velocity'], label='x_hat')\n",
    "plt.plot(results['time'], results['y_velocity'], label='y_hat')\n",
    "plt.plot(results['time'], results['z_velocity'], label='z_hat')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, you can plot the Euler angles (the rotation of the quadcopter over the $x$-, $y$-, and $z$-axes),"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f17c33cd278>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['phi'], label='phi')\n",
    "plt.plot(results['time'], results['theta'], label='theta')\n",
    "plt.plot(results['time'], results['psi'], label='psi')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "before plotting the velocities (in radians per second) corresponding to each of the Euler angles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f17c334d630>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['phi_velocity'], label='phi_velocity')\n",
    "plt.plot(results['time'], results['theta_velocity'], label='theta_velocity')\n",
    "plt.plot(results['time'], results['psi_velocity'], label='psi_velocity')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, you can use the code cell below to print the agent's choice of actions.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzsnXecVOW9/9/POdNnGwssRdQFC6DSpChqEMXeFWvsLTeJ0SRejUnuTWISjSYxzRt/yU1yo4lGxdgVJQYNUYwlIAgIiIiUFdheps8pz++Pc86U3ZnZws7ugvN5vXgxe+aUZ86c+Tzf51s+XyGlpIQSSiihhH0XymAPoIQSSiihhOKiRPQllFBCCfs4SkRfQgkllLCPo0T0JZRQQgn7OEpEX0IJJZSwj6NE9CWUUEIJ+zhKRF9CCSWUsI+jRPQllFBCCfs4SkRfQgkllLCPwzXYAwAYMWKErK2tHexhlFBCCSXsVVi5cmWTlHJkd/sNCaKvra1lxYoVgz2MEkoooYS9CkKIbT3Zr+S6KaGEEkrYx1Ei+hJKKKGEfRwloi+hhBJK2McxJHz0uaBpGnV1dcTj8cEeSgkl9Bo+n49x48bhdrsHeygllDB0ib6uro7y8nJqa2sRQgz2cEoooceQUtLc3ExdXR3jx48f7OGUUMLQdd3E43GGDx9eIvkS9joIIRg+fHhpNVrCkMGQJXqgRPIl7LUoPbslDCUMaaIvYWijNZrEMM3BHkYJJZTQDUpEXwCqqjJ9+nSOOOIIzj77bNra2gruv3XrVh599NE9vu51111HTU0NRxxxxB6fq7d46KGH+MpXvlJwn61bt/Lnhx9hR0uU9pjOihUruOWWW4o6rrfeeosbb7yxqNfoC3pyv0ooYbBRIvoC8Pv9rF69mnXr1lFdXc0DDzxQcP++EL2u6122XXPNNSxZsmSPzlFMbN26lcceewy/Zxe6HmbWrFncf//9Rb3mkiVLOO2004p6jRJK2FdRIvoeYu7cuXz66aeAlVVx++23c8QRRzBlyhQWLVoEwDe/+U3eeOMNpk+fzi9+8Qvi8TjXXnstU6ZMYcaMGfzjH/8ALCvwoosu4uyzz+aUU07pcq158+ZRXV1dcDzXXHMNt956KyeccAJ33HEHkUiE6667jtmzZzNjxgyee+45AI466ig++OCD1HHz589n5cqVtLS0cN555zF16lSOPvpo1qxZk/MaTz75ZOrvsrKy1Of815vLOeeE8/nN//yCZcuWcdZZZwHkPe+dd97Jddddx/z585kwYUJqYohEIpx55plMmzaNI444InUvO+PVV1/lpJNOytq2a9cu5s2bl1p1vfHGGwC88sorzJ07lyOPPJKLLrqIcDgMwL///W+OOeYYpk2bxpw5cwiFQgW/owsuuIDTTjuNQw45hG984xup6z744IMceuihHH/88bz55psFv6cSShgKGLLplZn4/gsfsH5nR7+e87CxFXzv7MN7tK9hGLz66qtcf/31ADz99NOsXr2a999/n6amJmbPns28efO49957ue+++3jxxRcB+NnPfgbA2rVr2bhxI6eccgqbNm0CLFfEmjVruiX0Qti0aRNLly5FVVW+/e1vc+KJJ/LHP/6RtrY25syZw0knncSll17KE088wfe//3127drFzp07mTlzJjfffDMzZszg2Wef5bXXXuOqq65i9erVPbruvffeyz333M2zP/sFkSov6zZ/mnrve9/7Xt7zbty4kX/84x+EQiEmTpzIl770JZYsWcLYsWNZvHgxAO3t7V2u19TUhNvtprKyMmv7o48+yqmnnsp//dd/YRgG0WiUpqYm7rrrLpYuXUowGOTHP/4xP//5z/nmN7/JJZdcwqJFi5g9ezYdHR34/X5+9atfAbm/o9WrV7Nq1Sq8Xi8TJ07k5ptvxuVy8b3vfY+VK1dSWVnJCSecwIwZM3r/5ZVQwgCiZNEXQCwWY/r06QwfPpyWlhZOPvlkAJYvX85ll12GqqqMGjWK448/nn//+99djl++fDlXXnklAJMmTeLAAw9MkcjJJ5+8RyQPcNFFF6GqKmBZsffeey/Tp09n/vz5xONxtm/fzsUXX8xf//pXAJ544gkuuuiiLmM78cQTaW5uzkmyeSGl9b8pszYXOu+ZZ56J1+tlxIgR1NTUUF9fz5QpU1i6dCl33HEHb7zxRhcydz5brpXP7NmzefDBB7nzzjtZu3Yt5eXlvP3226xfv55jjz2W6dOn86c//Ylt27bx4YcfMmbMGGbPng1ARUUFLper4He0YMECKisr8fl8HHbYYWzbto133nmH+fPnM3LkSDweD5dccknP71kJJQwS9gqLvqeWd3/D8dG3t7dz1lln8cADD3DLLbcgpez+YCi4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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f17c321b128>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['rotor_speed1'], label='Rotor 1 revolutions / second')\n",
    "plt.plot(results['time'], results['rotor_speed2'], label='Rotor 2 revolutions / second')\n",
    "plt.plot(results['time'], results['rotor_speed3'], label='Rotor 3 revolutions / second')\n",
    "plt.plot(results['time'], results['rotor_speed4'], label='Rotor 4 revolutions / second')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When specifying a task, you will derive the environment state from the simulator.  Run the code cell below to print the values of the following variables at the end of the simulation:\n",
    "- `task.sim.pose` (the position of the quadcopter in ($x,y,z$) dimensions and the Euler angles),\n",
    "- `task.sim.v` (the velocity of the quadcopter in ($x,y,z$) dimensions), and\n",
    "- `task.sim.angular_v` (radians/second for each of the three Euler angles)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 13.68490661  17.57494878  24.83437025   0.7559838    5.76653274   0.        ]\n",
      "[  9.1167552   10.35322841  -0.17178776]\n",
      "[ 0.2740367  -0.10428677  0.        ]\n"
     ]
    }
   ],
   "source": [
    "# the pose, velocity, and angular velocity of the quadcopter at the end of the episode\n",
    "print(task.sim.pose)\n",
    "print(task.sim.v)\n",
    "print(task.sim.angular_v)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the sample task in `task.py`, we use the 6-dimensional pose of the quadcopter to construct the state of the environment at each timestep.  However, when amending the task for your purposes, you are welcome to expand the size of the state vector by including the velocity information.  You can use any combination of the pose, velocity, and angular velocity - feel free to tinker here, and construct the state to suit your task.\n",
    "\n",
    "## The Task\n",
    "\n",
    "A sample task has been provided for you in `task.py`.  Open this file in a new window now. \n",
    "\n",
    "The `__init__()` method is used to initialize several variables that are needed to specify the task.  \n",
    "- The simulator is initialized as an instance of the `PhysicsSim` class (from `physics_sim.py`).  \n",
    "- Inspired by the methodology in the original DDPG paper, we make use of action repeats.  For each timestep of the agent, we step the simulation `action_repeats` timesteps.  If you are not familiar with action repeats, please read the **Results** section in [the DDPG paper](https://arxiv.org/abs/1509.02971).\n",
    "- We set the number of elements in the state vector.  For the sample task, we only work with the 6-dimensional pose information.  To set the size of the state (`state_size`), we must take action repeats into account.  \n",
    "- The environment will always have a 4-dimensional action space, with one entry for each rotor (`action_size=4`). You can set the minimum (`action_low`) and maximum (`action_high`) values of each entry here.\n",
    "- The sample task in this provided file is for the agent to reach a target position.  We specify that target position as a variable.\n",
    "\n",
    "The `reset()` method resets the simulator.  The agent should call this method every time the episode ends.  You can see an example of this in the code cell below.\n",
    "\n",
    "The `step()` method is perhaps the most important.  It accepts the agent's choice of action `rotor_speeds`, which is used to prepare the next state to pass on to the agent.  Then, the reward is computed from `get_reward()`.  The episode is considered done if the time limit has been exceeded, or the quadcopter has travelled outside of the bounds of the simulation.\n",
    "\n",
    "In the next section, you will learn how to test the performance of an agent on this task."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Agent\n",
    "\n",
    "The sample agent given in `agents/policy_search.py` uses a very simplistic linear policy to directly compute the action vector as a dot product of the state vector and a matrix of weights. Then, it randomly perturbs the parameters by adding some Gaussian noise, to produce a different policy. Based on the average reward obtained in each episode (`score`), it keeps track of the best set of parameters found so far, how the score is changing, and accordingly tweaks a scaling factor to widen or tighten the noise.\n",
    "\n",
    "Run the code cell below to see how the agent performs on the sample task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Episode = 1000, score =  -0.009 (best =   0.104), noise_scale = 3.2625"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "from agents.policy_search import PolicySearch_Agent\n",
    "from task import Task\n",
    "\n",
    "num_episodes = 1000\n",
    "target_pos = np.array([0., 0., 10.])\n",
    "task = Task(target_pos=target_pos)\n",
    "agent = PolicySearch_Agent(task) \n",
    "\n",
    "for i_episode in range(1, num_episodes+1):\n",
    "    state = agent.reset_episode() # start a new episode\n",
    "    while True:\n",
    "        action = agent.act(state) \n",
    "        next_state, reward, done = task.step(action)\n",
    "        agent.step(reward, done)\n",
    "        state = next_state\n",
    "        if done:\n",
    "            print(\"\\rEpisode = {:4d}, score = {:7.3f} (best = {:7.3f}), noise_scale = {}\".format(\n",
    "                i_episode, agent.score, agent.best_score, agent.noise_scale), end=\"\")  # [debug]\n",
    "            break\n",
    "    sys.stdout.flush()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This agent should perform very poorly on this task.  And that's where you come in!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Define the Task, Design the Agent, and Train Your Agent!\n",
    "\n",
    "Amend `task.py` to specify a task of your choosing.  If you're unsure what kind of task to specify, you may like to teach your quadcopter to takeoff, hover in place, land softly, or reach a target pose.  \n",
    "\n",
    "After specifying your task, use the sample agent in `agents/policy_search.py` as a template to define your own agent in `agents/agent.py`.  You can borrow whatever you need from the sample agent, including ideas on how you might modularize your code (using helper methods like `act()`, `learn()`, `reset_episode()`, etc.).\n",
    "\n",
    "Note that it is **highly unlikely** that the first agent and task that you specify will learn well.  You will likely have to tweak various hyperparameters and the reward function for your task until you arrive at reasonably good behavior.\n",
    "\n",
    "As you develop your agent, it's important to keep an eye on how it's performing. Use the code above as inspiration to build in a mechanism to log/save the total rewards obtained in each episode to file.  If the episode rewards are gradually increasing, this is an indication that your agent is learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'Actor' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-10-1b64b825c504>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m task = Task(target_pos=target_pos, init_pose=init_pose, \n\u001b[1;32m     14\u001b[0m             init_velocities=init_velocities, init_angle_velocities=init_angle_velocities)\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0magent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAgent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m labels = ['time', 'x', 'y', 'z', 'phi', 'theta', 'psi', \n",
      "\u001b[0;32m/home/workspace/agents/DDPG_Agent.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, task)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m         \u001b[0;31m# Actor (Policy) Model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactor_local\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mActor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_low\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_high\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mactor_target\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mActor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_low\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_high\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'Actor' is not defined"
     ]
    }
   ],
   "source": [
    "## TODO: Train your agent here.\n",
    "import sys\n",
    "import pandas as pd\n",
    "from agents.DDPG_Agent import Agent\n",
    "from task import Task\n",
    "\n",
    "num_episodes = 1000\n",
    "target_pos = np.array([0., 0., 10., 0., 0., 0.])\n",
    "init_pose = np.array([0., 0., 1., 0., 0., 0.])\n",
    "init_velocities = np.array([0., 0., 0.])\n",
    "init_angle_velocities = np.array([0., 0., 0.])\n",
    "\n",
    "task = Task(target_pos=target_pos, init_pose=init_pose, \n",
    "            init_velocities=init_velocities, init_angle_velocities=init_angle_velocities)\n",
    "agent = Agent(task) \n",
    "\n",
    "labels = ['time', 'x', 'y', 'z', 'phi', 'theta', 'psi', \n",
    "          'x_velocity','y_velocity', 'z_velocity', \n",
    "          'phi_velocity', 'theta_velocity', 'psi_velocity', \n",
    "          'rotor_speed1', 'rotor_speed2', 'rotor_speed3', 'rotor_speed4', \n",
    "          'reward']\n",
    "\n",
    "rewards = []\n",
    "all_results = []                         # list of all results for all episodes\n",
    "\n",
    "for i_episode in range(1, num_episodes+1):\n",
    "    results = {x: [] for x in labels}    # results for each episode\n",
    "    state = agent.reset_episode()        # start a new episode\n",
    "    while True:\n",
    "        action = agent.act(state) \n",
    "        next_state, reward, done = task.step(action)\n",
    "        agent.step(action, reward, next_state, done)\n",
    "        state = next_state\n",
    "        to_write = (\n",
    "            [task.sim.time] + list(task.sim.pose) +\n",
    "            list(task.sim.v) + list(task.sim.angular_v) +\n",
    "            list(rotor_speeds) + [reward]\n",
    "        )\n",
    "        \n",
    "        for ii in range(len(labels)):\n",
    "            results[labels[ii]].append(to_write[ii])\n",
    "        \n",
    "        if done:\n",
    "            print(\"\\rEpisode = {:4d} ... Reward = {:.2f}\".format(\n",
    "                i_episode, np.mean(results['reward'])), end=\"\") \n",
    "            rewards.append(np.mean(results['reward']))       \n",
    "            break\n",
    "    sys.stdout.flush()\n",
    "    all_results.append(results)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Plot the Rewards\n",
    "\n",
    "Once you are satisfied with your performance, plot the episode rewards, either from a single run, or averaged over multiple runs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## TODO: Plot the rewards.\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(rewards)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Reflections\n",
    "\n",
    "**Question 1**: Describe the task that you specified in `task.py`.  How did you design the reward function?\n",
    "\n",
    "**Answer**:\n",
    "I worked on takeoff task. and regarding my reward function, I tried to maximize the penality whenever the distance between the pose and target of the quadcopter is large or the agent has run out of time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 2**: Discuss your agent briefly, using the following questions as a guide:\n",
    "\n",
    "- What learning algorithm(s) did you try? What worked best for you?\n",
    "- What was your final choice of hyperparameters (such as $\\alpha$, $\\gamma$, $\\epsilon$, etc.)?\n",
    "- What neural network architecture did you use (if any)? Specify layers, sizes, activation functions, etc.\n",
    "\n",
    "**Answer**:\n",
    "1. I started with Actor-Critic algorithm and it worked well\n",
    "2. gamma = 0.99, epsilon = 0.15\n",
    "3. I used the same model architecture used in the given template for actor-critic algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 3**: Using the episode rewards plot, discuss how the agent learned over time.\n",
    "\n",
    "- Was it an easy task to learn or hard?\n",
    "- Was there a gradual learning curve, or an aha moment?\n",
    "- How good was the final performance of the agent? (e.g. mean rewards over the last 10 episodes)\n",
    "\n",
    "**Answer**:\n",
    "1. I started with Actor-Critic algorithm and it worked well\n",
    "2. gamma = 0.99, epsilon = 0.15\n",
    "3. I used the same model architecture used in the given template for actor-critic algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 4**: Briefly summarize your experience working on this project. You can use the following prompts for ideas.\n",
    "\n",
    "- What was the hardest part of the project? (e.g. getting started, plotting, specifying the task, etc.)\n",
    "- Did you find anything interesting in how the quadcopter or your agent behaved?\n",
    "\n",
    "**Answer**:\n",
    "1. I think the hardest part of the project is the reward function. because its the most important thing to make the agent learn well. \n",
    "2. I find the tweaking and tuning of the reward function was very interesting as it was the hardest part of the project. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
